{"version":3,"sources":["pages/Sort/action.js","pages/Sort/index.js"],"names":["actionSortRest","data","type","actionSortSwap","actionSortActivate","actionSortDeactivate","actionSortLock","actionSortDone","Option","Select","DELAY_UNIT","INIT_SORT_NUM","Timer","Sort","state","disabled","delay","values","cards","done","strValues","getRandomArray","nums","push","Math","ceil","random","setState","restSort","bubbleSort","swapped","sequence","indexLastUnsorted","length","i","props","indexes","temp","lockIndex","skipped","Array","from","keys","onChange","value","handleSelectChange","Number","onSliderAfterChange","each","clearInterval","start","slice","forEach","event","index","setTimeout","this","sort","className","defaultValue","min","max","placeholder","onClick","onAfterChange","map","card","classNames","height","transform","sortIndex","width","isActive","isLocked","React","Component","connect","action"],"mappings":"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","file":"static/js/sort.0bf6a62a.chunk.js","sourcesContent":["export const actionSortRest = data => ({\n  type: 'SORT_RESET',\n  ...data,\n});\nexport const actionSortSwap = data => ({\n  type: 'SORT_SWAP',\n  ...data,\n});\nexport const actionSortActivate = data => ({\n  type: 'SORT_ACTIVATE',\n  ...data,\n});\nexport const actionSortDeactivate = data => ({\n  type: 'SORT_DEACTIVATE',\n  ...data,\n});\nexport const actionSortLock = data => ({\n  type: 'SORT_LOCK',\n  ...data,\n});\nexport const actionSortDone = () => ({\n  type: 'SORT_DONE',\n});\n","import React from \"react\";\nimport { connect } from 'react-redux';\nimport classNames from 'classnames';\nimport { Select, InputNumber, Slider, Button } from 'antd'\nimport * as action from './action.js';\nimport 'antd/lib/button/style/css'\nimport 'antd/lib/slider/style/css'\nimport 'antd/lib/select/style/css'\nimport 'antd/lib/input-number/style/css'\nimport './style.css';\n\nconst Option = Select.Option\nconst INIT_EVENT_DELAY = 20 // 交换的过渡时间\nconst DELAY_UNIT = 1000\nconst HEIGHT_INCREMENT = 3 // 高度的增量, 数组的某一个值 * 增量 = 长方形高度\nconst INIT_SORT_NUM = 20\nconst Timer = {}\n\nclass Sort extends React.Component {\n\n  state = {\n    disabled: false,\n    delay: 100,\n    values: [], // 值为 SORT_ARRAY 的副本\n    cards: [], // 可视化需要的数组，就是每一个长方形（div元素），数组的每一个值都代表一个div元素\n    done: true, // 表示是否排序完成，为true时，右下角出现重置按钮\n    // strValues 用来解决数组中出现重复的值，移动位置不对的情况\n    strValues: [] // 数组的一个副本，会将数组的值与下标拼起来，形成唯一的一个字符串\n  }\n\n  componentDidMount(){\n    this.getRandomArray()\n  }\n\n  // 随机生成1到100的值\n  getRandomArray = (nums = INIT_SORT_NUM) => {\n    let values = []\n    while(nums > 0){\n      values.push(Math.ceil(Math.random() * 100))\n      nums--\n    }\n    this.setState({ values }, () => {\n      this.restSort()\n    })\n  }\n\n  // 冒泡排序方法，返回包括每一步的数组\n  bubbleSort = (values) => {\n    // sequence 为包括每一步内容的数组\n    let sequence = []\n    // swapped 为判断是否已经排序好的 标志位\n    let swapped\n    // indexLastUnsorted 用来减少不必要的循环\n    let indexLastUnsorted = values.length - 1\n    do {\n      swapped = false\n      for (let i = 0; i < indexLastUnsorted; i++) {\n        // card 是 state.cards 的一个成员\n        // 开始一次循环，就有两个card 的 isActive的值设置为true\n        sequence.push(\n          () => this.props.actionSortActivate({indexes: [i, i + 1]})\n        )\n        // 如果前一个数 大于 后一个数，就交换两数\n        if (values[i] > values[i + 1]) {\n          let temp = values[i]\n          values[i] = values[i + 1]\n          values[i + 1] = temp\n          swapped = true\n          // 满足交换的条件，就重新定义所有card的sortIndex属性\n          sequence.push(\n            () => this.props.actionSortSwap({indexes: [i, i + 1]})\n          )\n        }\n        // 结束这次循环之前，把原来两个card的isActive的值为true的，设置为false\n        sequence.push(\n          () => this.props.actionSortDeactivate({indexes: [i, i + 1]})\n        )\n      }\n      // 外层循环，每循环完一次，就锁定最后一个card，下次这个card 就不参与循环\n      let lockIndex = indexLastUnsorted\n      sequence.push(\n        () => this.props.actionSortLock({indexes: [lockIndex]})\n      )\n      indexLastUnsorted--\n    } while (swapped)\n\n    // 如果提前排序好了，把剩下的card全部锁定\n    let skipped = Array.from(Array(indexLastUnsorted + 1).keys())\n    sequence.push(\n      () => this.props.actionSortLock({indexes: skipped})\n    )\n    // 修改done 为true，完成排序\n    sequence.push(this.props.actionSortDone)\n    return sequence\n  }\n\n  onChange = (value) => {\n    this.getRandomArray(value)\n  }\n\n  handleSelectChange = (value) => {\n    this.getRandomArray(Number(value))\n  }\n\n  onSliderAfterChange = (value=1) => {\n    this.setState({\n      delay: DELAY_UNIT/value\n    }, () => {\n      this.restSort()\n    })\n  }\n\n  restSort = () => {\n    const { values } = this.state\n    for(var each in Timer){\n      clearInterval(Timer[each]);\n    }\n    this.setState({\n      disabled: false\n    })\n    this.props.actionSortRest({ values })\n  }\n\n  // todo stop timeout\n  start = () => {\n    // 排序数组，返回一个包括每步的值 和 每步状态的数组\n    const { values, delay } = this.state\n    this.restSort()\n    this.setState({\n      disabled: true\n    })\n    let sequence = this.bubbleSort(values.slice())\n    // 遍历上边排序得到的数组，定时执行操作，实现动画效果\n    sequence.forEach((event, index) => {\n      Timer[`timer${index}`] = setTimeout(() => {\n        if(typeof event === 'function'){\n          event()\n        }\n      }, index * delay)\n    })\n  }\n\n  render() {\n    const { cards } = this.props.sort\n    const { values, disabled } = this.state\n    return (\n      <div className=\"wrapper\">\n        <div className=\"options\">\n          <span className=\"options-item\">\n            <span className=\"label\">选择长度：</span>\n            <Select defaultValue=\"20\" onChange={this.handleSelectChange}>\n              <Option value=\"10\">10</Option>\n              <Option value=\"20\">20</Option>\n              <Option value=\"30\">30</Option>\n              <Option value=\"50\">50</Option>\n            </Select>\n          </span>\n          <span className=\"options-item\">\n            <span className=\"label\">输入长度：</span>\n            <InputNumber\n              min={1}\n              max={200}\n              defaultValue={INIT_EVENT_DELAY}\n              onChange={this.onChange}\n              placeholder=\"请输入排序长度\"\n            />\n          </span>\n          <span className=\"options-item\">\n            <Button\n              onClick={this.start}\n              disabled={disabled}\n              type=\"primary\"\n            >\n              开始排序\n            </Button>\n          </span>\n          <Slider defaultValue={INIT_EVENT_DELAY} onAfterChange={this.onSliderAfterChange} />\n          {/**<div className=\"sort-nums\">\n            要排序的数组：{values.join(' ')}\n          </div> */}\n        </div>\n        \n        <div className=\"cards\">\n        {\n          cards.map((card, index) => {\n            return (\n              <div className=\"card-wrapper\"\n                className={classNames('card-wrapper', {\n                  'card-no-border': values.length > 60\n                })}\n                style={{height: card.value * HEIGHT_INCREMENT + 'px',transform: 'translateX('+card.sortIndex*100+'%)', width: `${100/values.length}%`}}\n                key={index}\n              >\n                <div className={classNames('card', {\n                  'card-active': card.isActive,\n                  'card-locked': card.isLocked\n                })}\n                >\n                  {/*<div className=\"value\">{card.value}</div>*/}\n                </div>\n              </div>\n            )\n          })\n        }\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    sort: state.Sort,\n  };\n}\n\nexport default connect(mapStateToProps, {\n  ...action,\n})(Sort);\n"],"sourceRoot":""}